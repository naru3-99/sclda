Windowsシステムコール	Linuxシステムコール	説明
NtCreateFile	open (O_CREAT)	新しいファイルまたはI/Oデバイスを作成し、開くために使用
NtOpenFile	open	既存のファイルやデバイスを開くために使用
NtWriteFile	write	ファイルやデバイスにデータを書き込むために使用
NtReadFile	read	ファイルやデバイスからデータを読み取るために使用
NtSetInformationFile	fcntl/ioctl/rename/chmod	ファイルの情報を設定するために使用（属性変更、名前変更など）
NtDeleteFile	unlink	ファイルを削除するために使用
NtWriteVirtualMemory	ptrace (PTRACE_POKEDATA)	プロセスの仮想メモリ空間にデータを書き込むために使用
NtReadVirtualMemory	ptrace (PTRACE_PEEKDATA)	プロセスの仮想メモリ空間からデータを読み取るために使用
NtAllocateVirtualMemory	mmap	プロセスの仮想メモリ空間に新たなメモリ領域を割り当てるために使用
NtProtectVirtualMemory	mprotect	プロセスのメモリ領域の保護属性を変更するために使用
NtCreateSection	mmap	メモリのセクション（メモリマッピング）を作成します。これによりファイルまたはデバイスの内容を仮想メモリアドレス空間にマッピングすることができます。
NtOpenSection	なし	既存のメモリセクションを参照するために使用します。Linuxには直接的な対応コールはなく、既に mmap で作成されたマッピングにアクセスすることが前提です。
NtMapViewOfSection	mmap	ファイルやデバイスの内容をプロセスのアドレス空間にマッピングします。Linuxでは mmap システムコールがこの機能を担います。
NtDeviceIoControlFile	ioctl	デバイスやドライバに対する入出力操作の制御コマンドを送信します。このコマンドを使用してデバイスの設定変更、状態取得などを行います。
NtCreateProcess	fork, execve	新しいプロセスを作成します。Linuxでは fork で新しいプロセスを複製し、execve で新しいプログラムを実行します。
NtCreateProcessEx	fork, execve	拡張オプションを持つ新しいプロセスを作成します。Linuxでは基本的に fork と execve の組み合わせを使用します。
NtTerminateProcess	kill	指定されたプロセスを終了します。Linuxでは kill システムコールを使用してプロセスにシグナルを送信します。
NtCreateThread	clone, pthread_create	新しいスレッドを作成します。Linuxでは clone または pthread ライブラリの pthread_create を使用します。
NtSuspendThread	ptrace, tgkill	スレッドを一時停止します。Linuxでは ptrace または特定のスレッドグループに対する tgkill を使用してスレッドを一時停止できます。
NtResumeThread	ptrace, tgkill	一時停止されたスレッドを再開します。Linuxでも ptrace または tgkill を使ってスレッドを再開します。
NtTerminateThread	pthread_cancel, exit	スレッドを終了します。Linuxでは pthread_cancel またはスレッド自身による exit を使用します。
NtGetContextThread	ptrace	スレッドのコンテキスト情報を取得します。Linuxでは ptrace を使用して他のプロセスのスレッドコンテキストを取得します。
NtSetContextThread	ptrace	スレッドのコンテキスト情報を設定します。Linuxでは ptrace を使用して他のプロセスのスレッドコンテキストを設定します。
NtLoadDriver	insmod, modprobe	カーネルドライバをロードします。Linuxでは insmod や modprobe コマンドを使用してカーネルモジュールをロードします。
NtUnloadDriver	rmmod, modprobe	カーネルドライバをアンロードします。Linuxでは rmmod や modprobe コマンドを使用してカーネルモジュールをアンロードします。
NtQueryPerformanceCounter	clock_gettime	システムのパフォーマンスカウンタを取得します。Linuxでは clock_gettime システムコールを使用して高精度のタイムカウンタを取得します。
NtDelayExecution	nanosleep, usleep	プロセスの実行を指定された時間遅延させます。Linuxでは nanosleep や usleep 関数を使用して実行を遅延させることができます。